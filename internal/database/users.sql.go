// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkUserExist = `-- name: CheckUserExist :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE login = $1
) AS user_exist
`

func (q *Queries) CheckUserExist(ctx context.Context, login string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, login)
	var user_exist bool
	err := row.Scan(&user_exist)
	return user_exist, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password)
VALUES ($1, $2)
RETURNING id
`

type CreateUserParams struct {
	Login    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Login, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRefreshTokenById = `-- name: GetRefreshTokenById :one
SELECT refresh_token
FROM users
WHERE id = $1
`

func (q *Queries) GetRefreshTokenById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenById, id)
	var refresh_token string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, password
FROM users
WHERE login = $1
`

type GetUserByLoginRow struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (GetUserByLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i GetUserByLoginRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const logout = `-- name: Logout :exec
UPDATE users
SET refresh_token = ''
WHERE id = $1
`

func (q *Queries) Logout(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, logout, id)
	return err
}

const saveRefreshToken = `-- name: SaveRefreshToken :exec
UPDATE users
SET refresh_token = $2
WHERE id = $1
`

type SaveRefreshTokenParams struct {
	ID           uuid.UUID
	RefreshToken string
}

func (q *Queries) SaveRefreshToken(ctx context.Context, arg SaveRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, saveRefreshToken, arg.ID, arg.RefreshToken)
	return err
}
